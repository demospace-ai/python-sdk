"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .connection import Connection
from .customer_data import CustomerData
from .destination import Destination
from .link_token import LinkToken
from .object import Object
from .sdkconfiguration import SDKConfiguration
from .source import Source
from .sync import Sync
from fabra import utils
from fabra.models import shared
from typing import Callable, Dict, Union

class Fabra:
    connection: Connection
    r"""Operations on connections"""
    customer_data: CustomerData
    destination: Destination
    r"""Operations on destinations"""
    link_token: LinkToken
    r"""Operations on link tokens"""
    object: Object
    r"""Operations on objects"""
    source: Source
    r"""Operations on sources"""
    sync: Sync
    r"""Operations on syncs"""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 api_key_auth: Union[str,Callable[[], str]],
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: Dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param api_key_auth: The api_key_auth required for authentication
        :type api_key_auth: Union[str,Callable[[], str]]
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        security = shared.Security(api_key_auth = api_key_auth)
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security, server_url, server_idx, retry_config=retry_config)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.connection = Connection(self.sdk_configuration)
        self.customer_data = CustomerData(self.sdk_configuration)
        self.destination = Destination(self.sdk_configuration)
        self.link_token = LinkToken(self.sdk_configuration)
        self.object = Object(self.sdk_configuration)
        self.source = Source(self.sdk_configuration)
        self.sync = Sync(self.sdk_configuration)
    